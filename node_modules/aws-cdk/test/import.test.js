"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
jest.mock('promptly', () => {
    return {
        ...jest.requireActual('promptly'),
        confirm: jest.fn(),
        prompt: jest.fn(),
    };
});
const promptly = require("promptly");
const util_1 = require("./util");
const mock_sdk_1 = require("./util/mock-sdk");
const cloudformation_deployments_1 = require("../lib/api/cloudformation-deployments");
const import_1 = require("../lib/import");
const promptlyConfirm = promptly.confirm;
const promptlyPrompt = promptly.prompt;
let createChangeSetInput;
function stackWithQueue(props) {
    return (0, util_1.testStack)({
        stackName: 'StackWithQueue',
        template: {
            Resources: {
                MyQueue: {
                    Type: 'AWS::SQS::Queue',
                    Properties: props,
                },
            },
        },
    });
}
const STACK_WITH_QUEUE = stackWithQueue({});
const STACK_WITH_NAMED_QUEUE = stackWithQueue({
    QueueName: 'TheQueueName',
});
function stackWithGlobalTable(props) {
    return (0, util_1.testStack)({
        stackName: 'StackWithTable',
        template: {
            Resources: {
                MyTable: {
                    Type: 'AWS::DynamoDB::GlobalTable',
                    Properties: props,
                },
            },
        },
    });
}
function stackWithKeySigningKey(props) {
    return (0, util_1.testStack)({
        stackName: 'StackWithKSK',
        template: {
            Resources: {
                MyKSK: {
                    Type: 'AWS::Route53::KeySigningKey',
                    Properties: props,
                },
            },
        },
    });
}
let sdkProvider;
let deployments;
beforeEach(() => {
    jest.resetAllMocks();
    sdkProvider = new mock_sdk_1.MockSdkProvider({ realSdk: false });
    deployments = new cloudformation_deployments_1.CloudFormationDeployments({ sdkProvider });
    createChangeSetInput = undefined;
});
test('discovers importable resources', async () => {
    givenCurrentStack(STACK_WITH_QUEUE.stackName, {
        Resources: {},
    });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    expect(additions).toEqual([
        expect.objectContaining({
            logicalId: 'MyQueue',
        }),
    ]);
});
test('by default, its an error if there are non-addition changes in the template', async () => {
    givenCurrentStack(STACK_WITH_QUEUE.stackName, {
        Resources: {
            SomethingThatDisappeared: {
                Type: 'AWS::S3::Bucket',
            },
        },
    });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    await expect(importer.discoverImportableResources()).rejects.toThrow(/No resource updates or deletes/);
    // But the error can be silenced
    await expect(importer.discoverImportableResources(true)).resolves.toBeTruthy();
});
test('asks human for resource identifiers', async () => {
    // GIVEN
    givenCurrentStack(STACK_WITH_QUEUE.stackName, { Resources: {} });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    // WHEN
    promptlyPrompt.mockResolvedValue('TheQueueName');
    const importable = await importer.askForResourceIdentifiers(additions);
    // THEN
    expect(importable.resourceMap).toEqual({
        MyQueue: {
            QueueName: 'TheQueueName',
        },
    });
    expect(importable.importResources).toEqual([
        expect.objectContaining({
            logicalId: 'MyQueue',
        }),
    ]);
});
test('asks human to confirm automic import if identifier is in template', async () => {
    // GIVEN
    givenCurrentStack(STACK_WITH_NAMED_QUEUE.stackName, { Resources: {} });
    const importer = new import_1.ResourceImporter(STACK_WITH_NAMED_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    // WHEN
    promptlyConfirm.mockResolvedValue(true);
    const importable = await importer.askForResourceIdentifiers(additions);
    // THEN
    expect(importable.resourceMap).toEqual({
        MyQueue: {
            QueueName: 'TheQueueName',
        },
    });
    expect(importable.importResources).toEqual([
        expect.objectContaining({
            logicalId: 'MyQueue',
        }),
    ]);
});
test('asks human to confirm automic import if identifier is in template', async () => {
    // GIVEN
    givenCurrentStack(STACK_WITH_QUEUE.stackName, { Resources: {} });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    const importMap = {
        importResources: additions,
        resourceMap: {
            MyQueue: { QueueName: 'TheQueueName' },
        },
    };
    // WHEN
    await importer.importResources(importMap, {
        stack: STACK_WITH_QUEUE,
    });
    expect(createChangeSetInput?.ResourcesToImport).toEqual([
        {
            LogicalResourceId: 'MyQueue',
            ResourceIdentifier: { QueueName: 'TheQueueName' },
            ResourceType: 'AWS::SQS::Queue',
        },
    ]);
});
test('only use one identifier if multiple are in template', async () => {
    // GIVEN
    const stack = stackWithGlobalTable({
        TableName: 'TheTableName',
        TableArn: 'ThisFieldDoesntExistInReality',
        TableStreamArn: 'NorDoesThisOne',
    });
    // WHEN
    promptlyConfirm.mockResolvedValue(true); // Confirm yes/no
    await importTemplateFromClean(stack);
    // THEN
    expect(createChangeSetInput?.ResourcesToImport).toEqual([
        {
            LogicalResourceId: 'MyTable',
            ResourceIdentifier: { TableName: 'TheTableName' },
            ResourceType: 'AWS::DynamoDB::GlobalTable',
        },
    ]);
});
test('only ask user for one identifier if multiple possible ones are possible', async () => {
    // GIVEN -- no identifiers in template, so ask user
    const stack = stackWithGlobalTable({});
    // WHEN
    promptlyPrompt.mockResolvedValue('Banana');
    const importable = await importTemplateFromClean(stack);
    // THEN -- only asked once
    expect(promptlyPrompt).toHaveBeenCalledTimes(1);
    expect(importable.resourceMap).toEqual({
        MyTable: { TableName: 'Banana' },
    });
});
test('ask identifier if the value in the template is a CFN intrinsic', async () => {
    // GIVEN -- identifier in template is a CFN intrinsic so it doesn't count
    const stack = stackWithQueue({
        QueueName: { Ref: 'SomeParam' },
    });
    // WHEN
    promptlyPrompt.mockResolvedValue('Banana');
    const importable = await importTemplateFromClean(stack);
    // THEN
    expect(importable.resourceMap).toEqual({
        MyQueue: { QueueName: 'Banana' },
    });
});
test('take compound identifiers from the template if found', async () => {
    // GIVEN
    const stack = stackWithKeySigningKey({
        HostedZoneId: 'z-123',
        Name: 'KeyName',
    });
    // WHEN
    promptlyConfirm.mockResolvedValue(true);
    await importTemplateFromClean(stack);
    // THEN
    expect(createChangeSetInput?.ResourcesToImport).toEqual([
        {
            LogicalResourceId: 'MyKSK',
            ResourceIdentifier: { HostedZoneId: 'z-123', Name: 'KeyName' },
            ResourceType: 'AWS::Route53::KeySigningKey',
        },
    ]);
});
test('ask user for compound identifiers if not found', async () => {
    // GIVEN
    const stack = stackWithKeySigningKey({});
    // WHEN
    promptlyPrompt.mockReturnValue('Banana');
    await importTemplateFromClean(stack);
    // THEN
    expect(createChangeSetInput?.ResourcesToImport).toEqual([
        {
            LogicalResourceId: 'MyKSK',
            ResourceIdentifier: { HostedZoneId: 'Banana', Name: 'Banana' },
            ResourceType: 'AWS::Route53::KeySigningKey',
        },
    ]);
});
test('do not ask for second part of compound identifier if the user skips the first', async () => {
    // GIVEN
    const stack = stackWithKeySigningKey({});
    // WHEN
    promptlyPrompt.mockReturnValue('');
    const importMap = await importTemplateFromClean(stack);
    // THEN
    expect(importMap.resourceMap).toEqual({});
});
/**
 * Do a full import cycle with the given stack template
 */
async function importTemplateFromClean(stack) {
    givenCurrentStack(stack.stackName, { Resources: {} });
    const importer = new import_1.ResourceImporter(stack, deployments);
    const { additions } = await importer.discoverImportableResources();
    const importable = await importer.askForResourceIdentifiers(additions);
    await importer.importResources(importable, { stack });
    return importable;
}
function givenCurrentStack(stackName, template) {
    sdkProvider.stubCloudFormation({
        describeStacks() {
            return {
                Stacks: [
                    {
                        StackName: stackName,
                        CreationTime: new Date(),
                        StackStatus: 'UPDATE_COMPLETE',
                        StackStatusReason: 'It is magic',
                        Outputs: [],
                    },
                ],
            };
        },
        getTemplate() {
            return {
                TemplateBody: JSON.stringify(template),
            };
        },
        getTemplateSummary() {
            return {
                ResourceIdentifierSummaries: [
                    {
                        ResourceType: 'AWS::SQS::Queue',
                        ResourceIdentifiers: ['QueueName'],
                    },
                    {
                        ResourceType: 'AWS::DynamoDB::GlobalTable',
                        ResourceIdentifiers: ['TableName', 'TableArn', 'TableStreamArn'],
                    },
                    {
                        ResourceType: 'AWS::Route53::KeySigningKey',
                        ResourceIdentifiers: ['HostedZoneId,Name'],
                    },
                ],
            };
        },
        deleteChangeSet() {
            return {};
        },
        createChangeSet(request) {
            createChangeSetInput = request;
            return {};
        },
        describeChangeSet() {
            return {
                Status: 'CREATE_COMPLETE',
                Changes: [],
            };
        },
        executeChangeSet() {
            return {};
        },
        describeStackEvents() {
            return {};
        },
    });
}
//# sourceMappingURL=data:application/json;base64,